<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="publish-units-to-sys-sfdc-impl-test-suite.xml" />
	<munit:test name="read-yExplore-from-frp-folder-test" doc:id="7f1c447b-6320-4929-9dd6-4caefeee341d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock FTP Folder files list" doc:id="24b6e83c-cd8a-44e8-9761-eddb528f7676" processor="sftp:list">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="24ddcc35-4c82-4213-ab41-571d1fd572b7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://examples/units/mock_payload.dwl')]" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="c792ab90-38c5-46af-919b-b18d511d89e2" >
				<munit:payload value="#[readUrl('classpath://examples/units/set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://examples/units/set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="main-units:\units-sync-sub-flow" doc:id="0c941860-04df-44b9-afee-cf4f0b1344c2" name="main-units:\units-sync-sub-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c40d476f-7d82-451f-a085-523d55efd39d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import readyExplorefromfrpfoldertest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<!-- <munit:test name="publish-units-availability-to-sys-sfdc-impl-test-suite" doc:id="23448262-386e-4883-9ea7-fdddbf3e1304" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="get projects" doc:id="f06260a6-741a-4530-afb9-e7054b558dc1" processor="sys-global-sfdc:get-projects">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get projects" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="${secure::sys-global-sfdc.client.id}" attributeName="client-id" />
					<munit-tools:with-attribute whereValue="${secure::sys-global-sfdc.client.secret}" attributeName="client-secret" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://examples/unitAvailability/get-unit-projects-response.json','application/json')]" />
				</munit-tools:then-return>				
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="propertyCode related apartments" doc:id="07135b7f-2c76-4b77-9f35-cee815b93d91" processor="sys-yardi:get-apartment-availabilities">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get apartment availabilities" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="#[p('secure::sys-yardi.client.id')]" attributeName="client-id" />
					<munit-tools:with-attribute whereValue="#[vars.unitAvailabilityPropertyCode]" attributeName="property-code" />
					<munit-tools:with-attribute whereValue="#[p('secure::sys-yardi.client.secret')]" attributeName="client-secret" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://examples/unitAvailability/get-unit-apartments-response.json','application/json')]" />
				</munit-tools:then-return>				
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Units projectid related" doc:id="05569ecc-484f-42e8-baab-c35635fbc11c" processor="sys-global-sfdc:get-units-by-project-id">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get units by project id" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="${secure::sys-global-sfdc.client.id}" attributeName="client-id" />
					<munit-tools:with-attribute whereValue="${secure::sys-global-sfdc.client.secret}" attributeName="client-secret" />
					<munit-tools:with-attribute whereValue="#[vars.unitAvailabilityProductId]" attributeName="project-id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://examples/unitAvailability/get-unit-projectId-response.json','application/json')]" />
				</munit-tools:then-return>				
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock_Anypoint_MQ" processor="anypoint-mq:publish">
		         <munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Publish" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#['Message Published!']"/>
				</munit-tools:then-return>
			 </munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="main-unitsAvailability:\units-availability-sync-sub-flow" doc:id="f94552f9-adfd-4b57-b501-dcaabd42eeb6" name="main-unitsAvailability:\units-availability-sync-sub-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="e5a919d4-a14c-49e4-a243-ce57324b8181" actual='#["Success"]' expected='#["Success"]' message='#["Successfully payload published"]'/>
		</munit:validation>
	</munit:test> -->

</mule>
